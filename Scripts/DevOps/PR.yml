name: $(BuildId)

variables:
  jobs: []
  buildPlatforms: ["x64", "x86"]
  buildConfigurations: ["Debug", "Release"]

trigger: none


jobs:
  - job:
    displayName: Windows Universal
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 5

    variables:
      - group: Windows Build Variables
      - group: Global Build Variables

    strategy:
      matrix:
        ${{ each job in variables.jobs }}:
          ${{ each BuildPlatform in variables.buildPlatforms }}:
            ${{ each BuildConfiguration in variables.buildConfigurations }}:
              ${{ format('{0}{1}', BuildPlatform, BuildConfiguration) }}:
                BuildPlatform: $(BuildPlatform)
                BuildConfiguration: $(BuildConfiguration)

    pool:
      vmImage: $(Job.VmImage)

    steps:
      - checkout: self
        clean: false

      - task: PowerShell@2
        displayName: Show Variables
        inputs:
          targetType: inline
          script: |
            echo ("[" + $env:Job_VmImage)
            echo ("[" + $env:Job_TimeoutInMinutes)
            echo ("[" + $env:Job_CancelTimeoutInMinutes)
            echo ("[" + $env:BuildPlatform)
            echo ("[" + $env:BuildConfiguration)

      # - task: MSBuild@1
      #   displayName: Restore Packages
      #   inputs:
      #     solution: $(Build.SourcesDirectory)/UWP/Unjammit.UWP.csproj
      #     msbuildArchitecture: $(MSBuild.MSBuildArchitecture)
      #     msbuildArguments: /t:Restore

      # - task: MSBuild@1
      #   displayName: Build Unjammit.UWP
      #   inputs:
      #     solution: $(Build.SourcesDirectory)/UWP/Unjammit.UWP.csproj
      #     msbuildArchitecture: $(MSBuild.MSBuildArchitecture)
      #     configuration: $(BuildConfiguration)
      #     platform: $(BuildPlatform)
      #     msbuildArguments: |
      #       /p:AppxBundle=Always
      #       /p:AppxBundlePlatforms="$(BuildPlatform)"
      #       /p:UapAppxPackageBuildMode=StoreUpload
      #       /p:AppxPackageDir="$(Build.ArtifactStagingDirectory)\AppPackages\\"
      #     clean: true
      #     maximumCpuCount: $(MSBuild.MaximumCpuCount)
