# Expected variables:
#   - DotNetCoreSdk.Version
#   - XamariniOS.MonoVersion

parameters:
  # name:
  project:

  # XamariniOS
  packageApp: false
  buildForSimulator: true
  xcodeArguments: ''
#  signingIdentity: ''
#  signingProvisioningProfileID: ''

  debug: false

steps:
  # - template: SetMacOSFrameworkVersion.yml
  #   parameters:
  #     framework: Mono
  #     version: $(XamariniOS.MonoVersion)
  - bash: |
      /bin/bash -c "sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh ${XAMARINIOS_MONOVERSION}"
    displayName: Set Xamarin version set to $(XamariniOS.MonoVersion)

  - bash: |
      echo "##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]/Applications/Xcode_${XCODE_VERSION}.app"
      sudo xcode-select --switch /Applications/Xcode_${XCODE_VERSION}.app/Contents/Developer
      ##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'$(xcodeRoot);sudo xcode-select --switch $(xcodeRoot)/Contents/Developer

  - task: DotNetCoreInstaller@1
    inputs:
      packageType: sdk
      version: $(DotNetCoreSdk.Version)

  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: $(DotNetCoreSdk.Version)

  - task: MSBuild@1
    displayName: Restore Packages
    inputs:
      solution: ${{ parameters.project }}
      msbuildArchitecture: $(MSBuild.MSBuildArchitecture)
      msbuildArguments: /t:Restore

  - task: XamariniOS@2
    displayName: Build ${{ parameters.project }}
    inputs:
      solutionFile: ${{ parameters.project }}
      configuration: $(BuildConfiguration)
      clean: true
      packageApp: ${{ parameters.packageApp }}
      buildForSimulator: ${{ parameters.buildForSimulator }}
      args: ${{ parameters.xcodeArguments }}
  #    signingIdentity: ${{ parameters.signingIdentity }}
  #    signingProvisioningProfileID: ${{ parameters.signingProvisioningProfileID }}
